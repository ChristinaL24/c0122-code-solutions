Create a file in the root of your react-context solution directory named flow.txt.
For each feature in the application, describe the flow of the code in writing,
including the client, server, and database. How does the code work?

client -> req -> server -> query -> database -> result -> server -> res -> client

User can sign up.
  -Client:
    -The client will send a POST request to the server to '/api/auth/sign-up' and
     in the POST request body, the client will include the values for the username and password.
  -Server:
    -The jsonMiddleware will parse the json payload from the incoming POST request.
  -Database:
    -The password gets hashed and inserted into the 'users' table along with the username.
  -Server:
    -If the promise is fulfilled, the client will receive a response with a
    201 status, along with the userId, username, and the time the sign up was created at.
  -Client:
    -The client can now sign into the app with their credentials

User can sign in.
  -Client:
    -To sign in, the client will send a POST request to the server at '/api/auth/sign-in' and
     in the POST request body, the client will include their username and password.
  -Server:
    -The jsonMiddleware will parse the json payload from the incoming POST request.
  -Database:
    -The users table is being queried for the userId and hashedPassword.
  -Server:
    -After the database is queried, the server will authenticate if the user exist in the
     database. If the user does not exist, the server will throw an error and send a 401
     response to the client. If the user does exist, then the server will verify the
     password against the hashedPassword. If it matches, the client will be granted a signed
     token and will be able to successfully log into the app. If there is not
     a match, the server will throw a 401 error and state that their values are incorrect.
  -Client:
    -If the login is successful, the client will be given authorization to log into the app and browse
     around within the Awesome App. The jwt token will also be saved into the client's local storage
     at the time they sign in.

User can stay signed in (even if they refresh the page).
  -Client:
    -The client refreshes the page after signing in.
  -Server:
    -The server listens for a hashchange event on the window object. If there is a hashchange,
     the server will check if the user's token exist within the local storage
     using the decodeToken method. If the token exist, the server will keep the client
     signed in and on the same page.
  -Client:
    -The user will stay signed in and on the same page even after a refresh because
     of the jwt that is in the user's local storage.

User can sign out.
  -Client:
    -The client clicks the sign out button.
  -Server:
    -When the client signs out, the user's jwt token gets removed from local storage
     and the user's state becomes null.
  -Client:
    -The client is brought back to the sign in page.
